name: Build and Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:

  wait-for-other-workflow:
    name: Wait for Other Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Other Workflow to Complete
        run: "echo 'Waiting for other workflow to complete...'"

  build: # Workflow credit to https://github.com/samuelcolvin/rtoml/blob/main/.github/workflows/ci.yml
    if: github.event.pull_request.merged == true
    name: >
      build ${{ matrix.platform || matrix.os }}
      (${{ matrix.alt_arch_name || matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        arch: [main, alt]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir
          - os: macos
            arch: alt
            alt_arch_name: "arm64 universal2"
        exclude:
          - os: macos
            arch: alt
          - os: macos
            arch: alt
          - os: macos
            arch: alt
    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
      - uses: actions/checkout@v3

      - name: set up rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.alt_arch_name }}

      - run: rustup target add aarch64-apple-darwin
        if: matrix.os == 'macos'

      - run: rustup toolchain install stable-i686-pc-windows-msvc
        if: matrix.os == 'windows'

      - run: rustup target add i686-pc-windows-msvc
        if: matrix.os == 'windows'

      - name: Get pip cache dir
        id: pip-cache
        if: matrix.os != 'windows'
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Get pip cache dir
        id: pip-cache-win
        if: matrix.os == 'windows'
        run: |
          "dir=$(pip cache dir)" >> $env:GITHUB_OUTPUT

      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@v1
        if: runner.os == 'Windows'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm

      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: runner.os == 'Windows'

      - name: build_sdist
        if: matrix.os == 'ubuntu'
        run: |
          pip install maturin build
          python -m build --sdist -o wheelhouse
      - name: build ${{ matrix.platform || matrix.os }} binaries
        run: cargo build --release --target ${{ matrix.target }}

    #   - run: ${{ matrix.ls || 'ls -lh' }} wheelhouse/

    #   - uses: actions/upload-artifact@v3
    #     with:
    #       name: wheels
    #       path: wheelhouse
    
    # - name: Build
    #   run: |
    #     cargo install cross --git https://github.com/cross-rs/cross
    #     rustup target add x86_64-unknown-linux-gnu
    #     rustup target add aarch64-unknown-linux-gnu
    #     rustup target add x86_64-pc-windows-msvc
    #     rustup target add aarch64-pc-windows-msvc
    #     rustup target add x86_64-apple-darwin
    #     rustup target add x86_64-apple-darwin
    #     rustup target add aarch64-apple-darwin

    #     cross build --target aarch64-unknown-linux-gnu --release
    #     cross build --target x86_64-unknown-linux-gnu --release
    #     cross build --target x86_64-pc-windows-msvc --release
    #     cross build --target aarch64-pc-windows-msvc --release
    #     cross build --target aarch64-apple-darwin --release
    #     cross build --target x86_64-apple-darwin --release

    # - name: Build
    #   run: cargo build --target x86_64-unknown-linux-musl --target x86_64-pc-windows-gnu --target x86_64-apple-darwin --target aarch64-apple-darwin

    # - name: Archive artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: dockpack-${{ matrix.os }}-${{ matrix.target }}
    #     path: |
    #       target/${{ matrix.target }}/release/libdockpack.*  # Dynamic libraries (.dylib for macOS, .so for Linux)
    #       target/${{ matrix.target }}/release/dockpack*      # Binary executable
